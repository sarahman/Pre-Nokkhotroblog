<?php
/**
 * User Profile Form
 *
 * @category        Form
 * @copyright       Copyright (c) 2011
 * @author          Md. Sirajus Salayhin <salayhin@gmail.com>
 */
class Blog_Form_ProfileForm extends Speed_Form_Base
{
    public function __construct($options = array())
    {
        parent::__construct();

        $isEdit = empty($options['isEdit']) ? false : true;
        $this->initForm();
        $this->addDisplayField();
        $this->addNameField();
        $this->addEmailField($isEdit);
        //$this->addUserPasswordField();
        //$this->addConfirmedUserPasswordField();
        $this->addBioField();
        $this->addFacebookLink();
        $this->addTwitterLink();
        $this->addGtalkLink();
        $this->addLinkedinLink();
        $this->addDobField();
        $this->addTaglineField();
        $this->addProfileImage();
        $this->addSubmitButtonField();
        $this->addCancelButtonField();

        $this->finalizeForm();
        EasyBib_Form_Decorator::setFormDecorator($this, EasyBib_Form_Decorator::BOOTSTRAP,'submit','cancel');
    }

    protected function initForm()
    {

        $options = array(
            'name' => 'Edit Profile',
            'class' => 'span10',
            'enctype'=>'multipart/form-data'
        );


        $this->initializeForm($options);
    }

    protected function addNameField()
    {
        $options = array(
            'name' => 'name',
            'label' => 'Name',
            'class' => 'span10',
            'messageForRequired' => 'name is required.'
        );
        $this->addTextElement($options);

    }


    protected function addEmailField($isEdit = false)
    {
        $options = array(
            'name' => 'email_address',
            'label' => 'Email Address',
            'class' => 'span10',
            'messageForRequired' => 'Email Address is required and has to be unique.'
        );

        $element = $this->addTextElement($options);

        $element->addValidator('EmailAddress', true, array('messages' => 'Please enter valid email address'));

        if ($isEdit == false) {
            $element->addValidator(new Zend_Validate_Db_NoRecordExists(
                array('table' => 'users', 'field' => 'email_address')));
        }
    }


    protected function addDisplayField()
    {
        $options = array(
            'name' => 'display_name',
            'label' => 'Display Name',
            'class' => 'span10',
        );
        $this->addTextElement($options);

    }


    protected function addFacebookLink()
    {
        $options = array(
            'name' => 'facebook_link',
            'label' => 'Facebook Link',
            'class' => 'span10',
        );
        $this->addTextElement($options);

    }

    protected function addTwitterLink()
    {
        $options = array(
            'name' => 'twitter_link',
            'label' => 'Twitter Link',
            'class' => 'span10',
        );
        $this->addTextElement($options);

    }

    protected function addGtalkLink()
    {
        $options = array(
            'name' => 'gtalk_link',
            'label' => 'Gtalk Link',
            'class' => 'span10',
        );
        $this->addTextElement($options);

    }

    protected function addLinkedinLink()
    {
        $options = array(
            'name' => 'linkedin_link',
            'label' => 'Linkedin Link',
            'class' => 'span10',
        );
        $this->addTextElement($options);

    }

    protected function addDobField()
    {
        $options = array(
            'name' => 'date_of_birth',
            'label' => 'Date of birth',
            'class' => 'span2 hasDatepicker',
            'messageForRequired' => 'name is required.'
        );
        $this->addTextElement($options);

    }

    protected function addBioField()
    {
        $options = array(
            'name' => 'bio',
            'label' => 'Bio',
            'class' => 'span10',
            'rows' => 10,
            'cols' => 20,
        );
        $this->addTextAreaElement($options);

    }

    protected function addTaglineField()
    {
        $options = array(
            'name' => 'tagline',
            'label' => 'Teg Line',
            'class' => 'span10',
        );
        $this->addTextElement($options);

    }

    protected function addProfileImage()
    {
        $file = new Zend_Form_Element_File('profile_picture');

        $file->setLabel('Image')
            ->setAttrib('class', 'span4')
            ->addValidator('Extension', false, 'jpg,png,gif')
            ->addValidator('Size', false, 100000)
            ->setDescription('Maximize FIle Size 1 MB')
            ->setDestination('uploads/user_profile_images/')
            ->setMaxFileSize(100000);

        $this->formElements['profile_picture'] = $file;

    }


    public function addBannerImage()
    {
        $file = new Zend_Form_Element_File('user_panel_benner');

        $file->setLabel('Banner Image')
            ->addValidator('Extension', false, 'jpg,png,gif')
            ->addValidator('Size', false, 100000)
            ->setDescription('Maximize FIle Size 1 MB')
            ->setDestination('uploads/user_panel_benner/')
            ->setMaxFileSize(100000);

        $this->formElements['user_panel_benner'] = $file;

    }

    protected function addSubmitButtonField()
    {
        $this->addSubmitButtonElement(array('name' => 'submit'));
    }

    protected function addCancelButtonField()
    {
        $this->addRedirectingCancelButtonElement(array(
            'name' => 'cancel',
            'redirectLink' => '/user/auth'
        ));
    }

}

